1. 계정 정보 등록
  git config --global user.name '사용자명'
  git config --global user.email '사용자이메일'

2. git-prac 폴더를 git이 관리하는 폴더로 지정
  git init

3. 기본으로 생성되는 msater 브랜치에서 main 브랜치로 변경
  git checkout -b main : main브랜치를 생성하고 해당 브랜치로 이동
  git branch -M main : 기본브랜치를 main브랜치로 지정
  git status : 상태확인

4. 파일을 생성하고 add, commit 하기
  git add <파일명> : 파일을 staging area에 추가
  git commit : commit에 대한 메세지를 남기기 위해 vi에디터가 실행
      i: 입려모드로 변경, esc : 입력모드에서 나오기, wq 저장 종료
  git commit -m 'message' : commit을 하고 commit에 대한 간단한 메세지 작성
  git log : commit 내역 확인

5. 특정 commit 지점으로 되돌리기
  1. git log 또는 git reflog를 통해 commit id 확인
  git reset --soft<commit> : commit 내역을 되돌리고, commit만 취소(staging area)
  git reset --mixed<commit> : commit 내역을 되돌리고 staging까지 취소
  --------------- 파일 영향 x -----------------
  git reset --hard<commit> : commit 내역을 되돌리고 파일을 rollback
  git revert <commit>  :  지정한 commit으로 인해 발생한 변경을 되돌리고, 새로운 commit 을 생성해 commit내역에 추가.
  	revert 를  revert 하면, revert 하기 전으로 돌아가게 된다.
  
6. 원격 리포지토리 추가 및 push/pull
  git remote add origin <remote repository 주소>
  git pull --allow-unrelated-histories origin main
  	* --allow-unrelated-histories는, 원격리포지토리에서 처음 pull 할 때만 사용하는 옵션임.
  git push -u origin main
	  -u : push 할 기본 원격저장소와 브랜치를 기억, 앞으로는, git push 만 해도 원격저장소와 브랜치를 잡아준다.
	        * git push origin main 에서 origin main을 생략 할 수 있게된다.

7. git 브랜치 
	git checkout -b <브랜치명> : 새로운 브랜치를 생성하고 이동
	git checkout  <브랜치명> : 기존의 브랜치로 이동
	git merge <브랜치명> : 브랜치 병합(병합할 브랜치의 commit 내역도 함께 병합)
	git merge --squash <브랜치명> : 브랜치 병합 (병합할 브랜치의 commit내역을 합친 새로운 commit 생성)
		*** merge 한 후 반드시 새롭게 commit 할 것

8. conflict
	동시에 복수의 사용자가 같은 파일의 같은 라인을 수정할 경우 발생
	conflict 가 발생하면 발생한 라인을 git이 head로 표시해준다.
	사용할 코드를 제외한 나머지는 삭제하고 add이후 commit하여 충돌을 해결한다.

9. git personal 토큰 발급 받아야 